#! /usr/bin/env ruby

Main {
  description <<-txt
    i can has time tracking!

    punch is a k.i.s.s. tool for tracking the hours spent on various projects.
    it supports logging hours under a project name, adding notes about work 
    done during that period, and several very simple reporting tools that 
    operate over a window of time.

    run 'punch help modename' for more info.
  txt

  examples <<-txt
    . punch in projectname
    . punch in projectname 'an hour ago'
    . punch log projectname 'rewriting your java app in ruby...'
    . punch out projectname
    . punch total projectname --after 2007-12-03 --before 2007-12-07
    . punch total projectname --after 'yesterday morning' --before 'today at noon' 
  txt


  mode(:in){
    description 'punch in on a project'

    examples <<-txt
      . punch in projectname
      . punch in projectname 2007-01-01T09 
      . punch in projectname now
      . punch in projectname 'today at around noon' 
      . punch in projectname 2007-01-01T09 --message 'new years day'
    txt

    mixin :argument_project, :optional_now, :option_db, :option_message, :option_noop

    run{ y db.punch(:in, project, 'now' => now, 'message' => message) }
  }


  mode(:out){
    description 'punch out of a project or, iff no project given, all open projects'

    examples <<-txt
      . punch out projectname
      . punch out projectname 2007-01-01T09 
      . punch out projectname now
      . punch out projectname 2007-01-01T17 --message 'new years day'
      . punch out projectname 2007-01-01T05pm -m 'new years day'
      . punch out projectname an hour ago
      . punch out
    txt

    mixin :optional_project, :optional_now, :option_db, :option_message, :option_noop

    run{ y db.punch(:out, project, 'now' => now, 'message' => message) }
  }


  mode(:log){
    description 'log a message for a project you are currently logged into'

    examples <<-txt
      . punch log projectname 'xml - welcome to my pain cave!'
      . punch log projectname should have used yaml 
    txt

    mixin :argument_project, :option_db, :argument_message, :option_noop

    run{ y db.log(project, message) }
  }


  mode(:clock){
    description 'punch in and out retroactively'

    examples <<-txt
      . punch clock projectname 2007-01-01T09am 2007-01-01T05pm -m "working on new year's day"
    txt

    mixin :argument_project, :argument_punch_in, :argument_punch_out, :option_db, :option_message, :option_noop

    run{ y db.clock(project, punch_in, punch_out, 'message' => message) }
  }

  mode(:status){
    description 'shows the status of named project, or all projects iff none given'

    examples <<-txt
      . punch status
      . punch status projectname
    txt

    mixin :optional_project, :option_db

    run{ y db.status(project) }
  }

  mode(:list){
    description 'list a single/all projects, possibly filtering by time'

    examples <<-txt
      . punch list projectname
      . punch list projectname --after 2007-01-01 --before 2007-01-31
      . punch list
      . punch list -A 2007-01-01 -B 2007-01-31
    txt
 
    mixin :optional_project, :option_after, :option_before, :option_db

    run{ y db.list(project, 'window' => (after .. before)) }
  }

  mode(:total){
    description 'total the time for a single/all projects, possibly filtering by time'

    examples <<-txt
      . punch total projectname
      . punch total projectname --after 2007-01-01 --before 2007-01-31
      . punch total
      . punch total -A 2007-01-01 -B 2007-01-31
    txt

    mixin :optional_project, :option_after, :option_before, :option_db

    run{ y db.total(project, 'window' => (after .. before)) }
  }

  mode(:delete){
    description 'delete all records for a project'

    examples <<-txt
      . punch delete projectname
    txt

    mixin :argument_project, :option_db, :option_noop

    run{ y db.delete(project) }
  }

  mode(:dump){
    description 'cat the yaml db with lock held'

    examples <<-txt
      . punch dump 
      . punch dump projectname
    txt

    mixin :optional_project, :option_db

    run{ y db.dump(project) }
  }

  mode(:parse){
    description 'show how a time string will be parsed'

    examples <<-txt
      . punch parse 'yesterday morning' 
      . punch parse today at noon 
      . punch parse yesterday at 9pm 
    txt

    argument(:spec){
      arity -2
      attr
    }

    run{ y Time.parse(spec.join(' ')) }
  }


  mixin :argument_project do
    argument(:project){
      attr
    }
  end

  mixin :optional_project do
    argument(:project){
      optional
      attr
    }
  end

  mixin :argument_punch_in do
    argument(:punch_in){
      cast{|value| Time.parse value}
      attr
    }
  end
  
  mixin :argument_punch_out do
    argument(:punch_out){
      cast{|value| Time.parse value}
      attr
    }
  end

  mixin :argument_message do
    argument(:message){
      attr
      arity -2
    }
  end

  mixin :option_message do
    option(:message, :m){
      argument :required
      attr
    }
  end

  mixin :option_now do
    option(:now, :n){
      argument :required
      desc 'consider this time as the current time'
      cast{|value| Time.parse value}
      default Time::Now
      attr
    }
  end

  mixin :optional_now do
    argument(:now){
      optional
      desc 'consider this time as the current time'
      arity -2
      default Time::Now
    }
    attribute(:now){ Time.parse param['now'].values.join(' ') }
  end

  mixin :option_db do
    option(:db){
      argument :required
      default File.join(Home, '.punch.yml')
      attr{|param| DB.new(param.value) }
    }
  end

  mixin :option_noop do
    option(:noop, :N){
      cast{|value| $NOOP = value}
    }
  end

  mixin :option_after do
    option(:after, :A){
      argument :required
      desc 'limit data shown to entries after this iso8601 timestamp'
      default Time::Beginning
      cast :time
      attr
    }
  end

  mixin :option_before do
    option(:before, :B){
      argument :required
      desc 'limit data shown to entries before this iso8601 timestamp'
      default Time::End
      cast :time
      attr
    }
  end

  run{ help! }
}







#
# bootstrap libs and litter some crap into ruby built-ins ;-)
#

  BEGIN {
    %w(yaml yaml/store time pathname tempfile fileutils).each {|lib| require lib}
    %w(rubygems main orderedhash chronic attributes).each do |depends|
      begin
        require depends
      rescue
        abort "gem install #{depends}"
      end
    end

    Home = File.expand_path(ENV['HOME'] || '~')

    ### hackity hack, don't talk back

    class Object
      def yaml_inline!
        class << self 
          def to_yaml_style() :inline end
        end
      end
    end

    class Time
      Beginning = Time.at(0).iso8601

      End = Time.at((2**31)-1).iso8601

      Now = Time.now.iso8601

      Null = Time.at(0).instance_eval do
        def to_s() "" end
        def inspect() "" end
        self
      end

      def to_s(n=0) iso8601(n) end
      alias_method 'inspect', 'to_s'

      ### hack to fix Time.parse bug
      Parse = Time.method 'parse'
      def self.parse string
        if string =~ %r'^\d\d\d\d-\d\d-\d\dT\d\d:?$'
          string = string.sub(%r/:$/,'') + ':00'
        end
        if string =~ %r/\ban\b/
          string = string.sub(%r/\ban\b/, '1')
        end
        if string =~ %r'^\d\d\d\d-\d\d-\d\d'
          Parse.call string
        else
          Chronic.parse string, :context => :past
        end
      end

      def to_yaml( opts = {} )
        YAML::quick_emit( object_id, opts ) do |out|
          tz = "Z"
          # from the tidy Tobias Peters <t-peters@gmx.de> Thanks!
          unless self.utc?
            utc_same_instant = self.dup.utc
            utc_same_writing = Time.utc(year,month,day,hour,min,sec,usec)
            difference_to_utc = utc_same_writing - utc_same_instant
            if (difference_to_utc < 0) 
              difference_sign = '-'
              absolute_difference = -difference_to_utc
            else
              difference_sign = '+'
              absolute_difference = difference_to_utc
            end
            difference_minutes = (absolute_difference/60).round
            tz = "%s%02d:%02d" % [ difference_sign, difference_minutes / 60, difference_minutes % 60]
          end
          standard = self.strftime( "%Y-%m-%dT%H:%M:%S" )
          standard += ".%02d" % [usec] #if usec.nonzero?
          standard += "%s" % [tz]
          if to_yaml_properties.empty?
            out.scalar( taguri, standard, :plain )
          else
           out.map( taguri, to_yaml_style ) do |map|
             map.add( 'at', standard )
             to_yaml_properties.each do |m|
               map.add( m, instance_variable_get( m ) )
             end
           end
          end
        end
      end
    end

    class Numeric
      def hms s = self.to_i
        h, s = s.divmod 3600
        m, s = s.divmod 60
        [h.to_i, m.to_i, s]
      end
    end

    class String
      def hms
        h, m, s = split %r/:/, 3
        [h.to_i, m.to_i, s.to_i]
      end
    end

    class Hash
      def getopt key, default = nil
        return self[key.to_s] if has_key?(key.to_s)
        return self[key.to_s.to_sym] if has_key?(key.to_s.to_sym)
        return self[key] if has_key?(key)
        default
      end
    end

    class DB
      attr 'pathname'
      attr 'db'

      def initialize pathname
        @pathname = Pathname.new pathname.to_s
        if $NOOP
          t = Tempfile.new Process.pid.to_s
          t.write IO.read(pathname)
          t.close
          @db = YAML::Store.new t.path
        else
          @db = YAML::Store.new @pathname.to_s
        end
      end

      # If a project name is a character or two off from an existing project, ask whether it was a typo or not.
      def typo_check(project)
        unless (roots = @db.roots).include?(project)
          alternatives = roots.map { |existing_proj|
            p1, p2 = [existing_proj, project].map {|p| p.instance_eval("chars.to_a")}
            c = p1 & p2
            tanimoto = (c.size.to_f / (p1.size + p2.size - c.size)).to_f
            
            existing_proj if (0.6..0.99).include?(tanimoto)
          }.compact.uniq
          puts "Psst: did you mean to type '#{alternatives.join(' or ')}'? (You typed is '#{project}')\n"
        end
      end

      def punch which, project, options = {}
        now = options.getopt 'now'
        messages = [
          "punch #{ which } @ #{ now }",
          options.getopt('message'),
        ].flatten.compact
        @db.transaction do
          if project
            typo_check(project)
            create project
            list = @db[project.to_s]
            entry = list.last
            case which.to_s
              when /in/
                if(entry and entry['out'].nil?)
                  abort 'you first need to punch out'
                else
                  entry = create_entry('in' => now, 'out' => nil, 'log' => [messages].flatten.compact)
                  list << entry
                end
              when /out/
                if(entry.nil? or (entry and (entry['in'].nil? or entry['out'])))
                  abort 'you first need to punch in'
                else
                  entry = create_entry entry
                  sum = now - Time.parse(entry['in'].to_s)
                  entry['out'] = now
                  entry['log'] = [entry['log'], messages].flatten.compact
                  entry['total'] = ('%0.2d:%0.2d:%0.2d' % sum.hms)
                  list[-1] = entry
                end
            end
            entry
          else
            entries = OrderedHash.new 
            @db.roots.each do |project|
              list = @db[project]
              next unless Array === list
              list.each do |entry|
                next unless entry
                if(entry['in'] and entry['out'].nil?)
                  entry = create_entry entry
                  sum = now - Time.parse(entry['in'].to_s)
                  entry['out'] = now
                  entry['log'] = [entry['log'], messages].flatten.compact
                  entry['total'] = ('%0.2d:%0.2d:%0.2d' % sum.hms)
                  list[-1] = entry
                  (entries[project] ||= []) << entry
                end
              end
            end
            entries
          end
        end
      end

      def log project, message, options = {}
        @db.transaction do
          create project
          message = [message].flatten.compact.join(' ')
          list = @db[project.to_s]
          entry = list.last
          if(entry.nil? or (entry and entry['out']))
            abort 'you first need to punch in'
          end
          entry = create_entry entry
          entry['log'] = [entry['log'], message].flatten.compact
          list[-1] = entry
          entry
        end
      end

      def clock project, punch_in, punch_out, options = {}
        @db.transaction do
          log = [
            "punch in @ #{ punch_in }",
            options.getopt('message'),
            "punch out @ #{ punch_out }",
          ].flatten.compact
          create project
          list = @db[project.to_s]
          entry = create_entry('in' => punch_in, 'out' => punch_out, 'log' => log)
          list << entry
          @db[project.to_s] = list.sort_by{|e| e.values_at('in', 'out')}
          entry
        end
      end

      def list project, options = {}
        window = options['window'] || options[:window]
        @db.transaction do
          create project
          if project
            @db[project.to_s].select do |entry|
              a, b = entry.values_at 'in', 'out'
              if a and b
                window === Time.parse(a.to_s) and window === Time.parse(b.to_s)
              end
            end.map{|entry| create_entry entry}
          else
            @db.roots
          end
        end
      end

      def status project, options = {}
        @db.transaction do
          h = Hash.new
          @db.roots.each do |root|
            entry = @db[root].last
            a, b =
              if entry
                entry.values_at 'in', 'out'
              else
                [false, 'out']
              end
            #status = b ? "out @ #{ b }" : "in  @ #{ a }"
            #status = b ? ['out', b] : ['in', a] 
            #status.yaml_inline!
            status = b ? Hash['out', b] : Hash['in', a] 
            if project
              h[project] = status if project == root
            else
              h[root] = status
            end
          end
          h
        end
      end

      def total project, options = {}
        window = options['window'] || options[:window]
        @db.transaction do
          if project
            create project
            selected = @db[project.to_s].select do |entry|
              a, b = entry.values_at 'in', 'out'
              window === Time.parse(a.to_s) and window === Time.parse(b.to_s)
            end
            filtered = { project => selected }
          else
            filtered = Hash.new 
            @db.roots.each do |project|
              selected = @db[project.to_s].select do |entry|
                a, b = entry.values_at 'in', 'out'
                window === Time.parse(a.to_s) and window === Time.parse(b.to_s)
              end
              filtered.update project => selected
            end
          end
          total = Hash.new
          filtered.each do |project, selected|
            sum = 0
            selected.each do |entry|
              a, b = entry.values_at 'in', 'out'
              next unless a and b
              a = Time.parse(a.to_s)
              b = Time.parse(b.to_s)
              sum += (b - a)
            end
            total.update project => ('%0.2d:%0.2d:%0.2d' % sum.hms)
          end
          total
        end
      end

      def delete project
        @db.transaction do
          @db.delete project
          project
        end
      end

      def dump project
        @db.transaction do
          dumped = OrderedHash.new
          if project
            dumped[project] = Array.new
            @db[project].each do |entry|
              dumped[project] << create_entry(entry) 
            end
          else
            @db.roots.each do |project|
              dumped[project] = Array.new
              @db[project].each do |entry|
                dumped[project] << create_entry(entry) 
              end
            end
          end
          dumped
        end
      end

      def create project
        project = project.to_s.strip
        @db[project.to_s] ||= Array.new unless project.empty?
      end

      def create_entry hash = {}
        entry = OrderedHash.new
        %w[ in out log total ].each do |key|
          entry[key] = hash.getopt key 
        end
        entry
      end
    end
  }
